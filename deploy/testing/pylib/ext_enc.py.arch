import smbus
import time

# Constants from the original C++ header file
UNIT_EXT_ENCODER_ADDR = 0x59
UNIT_EXT_ENCODER_ENCODER_REG = 0x00
UNIT_EXT_ENCODER_METER_REG = 0x10
UNIT_EXT_ENCODER_METER_STRING_REG = 0x20
UNIT_EXT_ENCODER_RESET_REG = 0x30
UNIT_EXT_ENCODER_PERIMETER_REG = 0x40
UNIT_EXT_ENCODER_PULSE_REG = 0x50
UNIT_EXT_ENCODER_ZERO_PULSE_VALUE_REG = 0x60
UNIT_EXT_ENCODER_ZERO_MODE_REG = 0x70
FIRMWARE_VERSION_REG = 0xFE
I2C_ADDRESS_REG = 0xFF

class UNIT_EXT_ENCODER:
    def __init__(self, bus_number=1, addr=UNIT_EXT_ENCODER_ADDR):
        self._bus = smbus.SMBus(bus_number)
        self._addr = addr

    def writeBytes(self, addr, reg, buffer):
        self._bus.write_i2c_block_data(addr, reg, buffer)

    def readBytes(self, addr, reg, length):
        return self._bus.read_i2c_block_data(addr, reg, length)

    def begin(self):
        time.sleep(0.01)  # Delay for 10ms
        try:
            self._bus.write_quick(self._addr)
            return True
        except IOError:
            return False

    def getEncoderValue(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_ENCODER_REG, 4)
        value = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24)
        return value

    def getZeroPulseValue(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_ZERO_PULSE_VALUE_REG, 4)
        value = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24)
        return value

    def setZeroPulseValue(self, value):
        data = [value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff]
        self.writeBytes(self._addr, UNIT_EXT_ENCODER_ZERO_PULSE_VALUE_REG, data)

    def getMeterValue(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_METER_REG, 4)
        value = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24)
        return value

    def getMeterString(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_METER_STRING_REG, 9)
        return ''.join(chr(i) for i in data)

    def resetEncoder(self):
        self.writeBytes(self._addr, UNIT_EXT_ENCODER_RESET_REG, [1])

    def setPerimeter(self, perimeter):
        data = [perimeter & 0xff, (perimeter >> 8) & 0xff, (perimeter >> 16) & 0xff, (perimeter >> 24) & 0xff]
        self.writeBytes(self._addr, UNIT_EXT_ENCODER_PERIMETER_REG, data)

    def getPerimeter(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_PERIMETER_REG, 4)
        value = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24)
        return value

    def setPulse(self, pulse):
        data = [pulse & 0xff, (pulse >> 8) & 0xff, (pulse >> 16) & 0xff, (pulse >> 24) & 0xff]
        self.writeBytes(self._addr, UNIT_EXT_ENCODER_PULSE_REG, data)

    def getPulse(self):
        data = self.readBytes(self._addr, UNIT_EXT_ENCODER_PULSE_REG, 4)
        value = data[0] | (data[1] << 8) | (data[2] << 16) | (data[3] << 24)
        return value

    def setZeroMode(self, mode):
        self.writeBytes(self._addr, UNIT_EXT_ENCODER_ZERO_MODE_REG, [mode])

    def getFirmwareVersion(self):
        data = self.readBytes(self._addr, FIRMWARE_VERSION_REG, 1)
        return data[0]

    def setI2CAddress(self, addr):
        self.writeBytes(self._addr, I2C_ADDRESS_REG, [addr])
        self._addr = addr
        return self._addr

    def getI2CAddress(self):
        data = self.readBytes(self._addr, I2C_ADDRESS_REG, 1)
        return data[0]

# Usage Example:
encoder = UNIT_EXT_ENCODER()
if encoder.begin():
    print("Encoder initialized successfully")
    print("Encoder Value:", encoder.getEncoderValue())
    encoder.setZeroPulseValue(1000)
    print("Zero Pulse Value:", encoder.getZeroPulseValue())
else:
    print("Failed to initialize encoder")